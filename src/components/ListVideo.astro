---
// import { Directus } from "@directus/sdk";
// const directus = new Directus('http://127.0.0.1:8055');
// const cookie = Astro.cookies.get("directus_refresh_token")
// directus.auth.storage.auth_refresh_token = cookie.value!
// await directus.auth.refresh();

// const search = Astro.url.searchParams.get('search')! || '';
// let result;
// let videoData;
// if (search.length > 0) {
//         result = await fetch(`http://127.0.0.1:8055/items/Videos?filter[title][_contains]=${search}` || '').then((response) =>
//         response.json()
//         ); 
//     videoData = result?.data; 
// } else if (cookie.value!.length > 0) {
// try {
//   directus.auth.storage.auth_refresh_token = cookie.value!;
//   await directus.auth.refresh();
//   var topics = await directus.items("Videos");
//   result = await topics.readByQuery({
//     fields: ["*", "topic_ID.topic_user.directus_users_id"],
//     filter: {
//       "topic_ID": {
//         "topic_user": {
//           "directus_users_id": {
//             "id": {
//               _eq: "$CURRENT_USER",
//             },
//           },
//         },
//       },
//     },
//   });

//   videoData = result?.data;
//   localStorage.setItem("videoData", JSON.stringify(videoData));
//   videoData = JSON.parse(localStorage.getItem("videoData")!);
// } catch (error) {
//   console.error(error);
// }
// }
// else {
//     result = await fetch(`http://127.0.0.1:8055/items/Videos`).then((response) =>
//     response.json()
//     );
//     videoData = result?.data
// }

// import { Directus } from "@directus/sdk";

// // Initialize Directus instance
// const directus = new Directus('http://127.0.0.1:8055');

// async function fetchData() {
//   const search = Astro.url.searchParams.get('search') || '';
//   let result;
//   let videoData;

//   const isAuthenticated = Boolean(Astro.cookies.get("directus_refresh_token"));

//   if (search.length > 0) {
//     // User is searching, fetch items that match the search query
//     result = await fetch(`http://127.0.0.1:8055/items/Videos?filter[title][_contains]=${search}`).then(response => response.json());
//     videoData = result?.data;
//   } else if (isAuthenticated) {
//     // User is signed in, fetch items from topics they have subscribed to
//     try {
//       const currentUserID = "YOUR_CURRENT_USER_ID"; // Replace this with the actual ID of the current user
//       result = await directus.items("Videos").readByQuery({
//         fields: ["*", "topic_ID.topic_user.directus_users_id"],
//         filter: {
//           "topic_ID": {
//             "topic_user": {
//               "directus_users_id": {
//                 "id": {
//                   _eq: currentUserID,
//                 },
//               },
//             },
//           },
//         },
//       });

//       videoData = result?.data;
//       localStorage.setItem("videoData", JSON.stringify(videoData));
//       videoData = JSON.parse(localStorage.getItem("videoData") || '');
//     } catch (error) {
//       console.error(error);
//     }
//   } else {
//     // User is not signed in, fetch all items
//     result = await fetch(`http://127.0.0.1:8055/items/Videos`).then(response => response.json());
//     videoData = result?.data;
//   }

//   return videoData;
// }

// Call the fetchData function and use the videoData accordingly in your application.
// fetchData().then(videoData => {
//   // Use the videoData here
// });

// const search = Astro.url.searchParams.get('search')! || '';
import { Directus } from "@directus/sdk";
const directus = new Directus("http://127.0.0.1:8055");
const cookie = Astro.cookies.get("directus_refresh_token");
let videoData;
let result;
  try {
    directus.auth.storage.auth_refresh_token = cookie.value!;
    await directus.auth.refresh();
    var topics = await directus.items("Videos");
    result = await topics.readByQuery({
      fields: ["*", "topic_ID.topic_user.directus_users_id"],
      filter: {
        "topic_ID": {
          "topic_user": {
            "directus_users_id": {
              "id": {
                _eq: "$CURRENT_USER",
              },
            },
          },
        },
      },
    });
  
    videoData = result?.data;
    localStorage.setItem("videoData", JSON.stringify(videoData));
  } catch (error) {
    console.error(error);
  }
if (localStorage.length === 0) {
    result = await fetch(`http://127.0.0.1:8055/items/Videos`).then((response) =>
    response.json()
    );
    videoData = result?.data
}
videoData = JSON.parse(localStorage.getItem("videoData")!);
---
        <ul class="flex flex-wrap justify-center gap-7 list-none m-4">
            {
                videoData?.map((video: { slug: any; heroimg: string | null | undefined; icon: string | null | undefined; title: unknown; chanel: unknown; views: unknown; time: unknown; }) => (
                    <li>
                        <a href={`/video/${video.slug}`}>
                            <div class="h-64 w-64 rounded bg-lightpurple shadow-md cursor-pointer transition duration-200 hover:shadow-2xl hover:bg-grape">
                            <img class="h-3/5 w-5/5 rounded" src={video.heroimg} />
                            <div class="flex mt-4 gap-2">
                            <img class="h-8 w-8 rounded-full ml-2" src={video.icon} />
                            <div>
                                <p class="font-semibold font-sans text-pink text-lg">{video.title}</p>
                                <div class="mt-1">
                                    <p class="font-sans text-darkgray text-sm font-medium">{video.chanel}</p>
                                    <div class="flex gap-2">
                                        <p class="font-sans text-darkgray text-xs font-normal">{video.views} views</p>
                                        <p class="font-sans text-darkgray text-xs font-normal">{video.time}</p>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </a>
                    </li>
                ))
            }
        </ul>